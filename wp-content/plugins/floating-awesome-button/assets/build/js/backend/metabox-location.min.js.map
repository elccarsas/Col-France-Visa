{"version":3,"file":"metabox-location.min.js","mappings":";;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,kDAAkD,iDAAiD,WAAW,2BAA2B,4BAA4B;AACrK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oCAAoC;AAC1D;AACA;AACA;AACA,iCAAiC,cAAc,KAAK,mBAAmB,KAAK;AAC5E,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB,KAAK,YAAY,QAAQ,GAAG,KAAK;AAClF,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,sBAAsB,qCAAqC;AAC3D,sBAAsB,+BAA+B;AACrD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,wDAAwD;AACxD;AACA;AACA,qDAAqD;AACrD,iCAAiC,iDAAiD;AAClF;AACA,kDAAkD;AAClD;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,YAAY;AACzF,0BAA0B,qCAAqC,QAAQ,SAAS;AAChF,aAAa;AACb;AACA,6BAA6B;AAC7B;AACA;AACA,yDAAyD,WAAW,UAAU,gCAAgC,+EAA+E;AAC7L;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,iBAAiB;AACjB,yBAAyB;AACzB,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,YAAY;AACzF,0BAA0B,qCAAqC,QAAQ,SAAS;AAChF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,iBAAiB;AACjB,yBAAyB;AACzB,aAAa;AACb;AACA,OAAO","sources":["webpack://fab/./assets/ts/metabox-location/metabox-location.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Global Class  */\nwindow.FAB_METABOX_LOCATION = Object.assign(Object.assign({}, window.FAB_METABOX_LOCATION), { \n    /**\n     * Define Default Option\n     * */\n    defaultOptions: Object.assign(Object.assign({}, window.FAB_METABOX_LOCATION.defaultOptions), { select2: { placeholder: '--choose--' }, type: [], post_types: [] }), \n    /** Initiate Metabox Location */\n    init: () => {\n        /** Validate Data Before Form Submission */\n        jQuery('#post').on('submit', function () {\n            let invalidRule = window.FAB_METABOX_LOCATION.check_invalid_rules();\n            /** Check Number of rules */\n            let numberofRules = jQuery('#fab-location-rules .fab-location-rule-item').length;\n            if (numberofRules == 1 && invalidRule) {\n                let ruleItem = jQuery('#fab-location-rules .fab-location-rule-item').last();\n                /** Rule Type */\n                jQuery('.select2[name=\"fab_location_type[]', ruleItem).val('');\n                jQuery('.select2[name=\"fab_location_type[]', ruleItem).trigger('change');\n                /** Rule Operator */\n                jQuery('.select2[name=\"fab_location_operator[]', ruleItem).val('');\n                jQuery('.select2[name=\"fab_location_operator[]', ruleItem).trigger('change');\n                /** Rule Value */\n                jQuery('.select2[name=\"fab_location_value[]', ruleItem).val('');\n                jQuery('.select2[name=\"fab_location_value[]', ruleItem).trigger('change');\n                /** Rule Logic */\n                jQuery('.select2[name=\"fab_location_logic[]', ruleItem).val('');\n                jQuery('.select2[name=\"fab_location_logic[]', ruleItem).trigger('change');\n                return true;\n            }\n            /** Inform User for invalid location rules */\n            if (invalidRule) {\n                jQuery.dialog({\n                    icon: 'fas fa-times',\n                    closeIcon: true,\n                    animation: 'scale',\n                    columnClass: 'j-small',\n                    title: 'Error',\n                    content: 'Please check input, there are invalid location rules!',\n                });\n            }\n            return !invalidRule;\n        });\n    }, \n    /** Initialize Type Options */\n    init_type_options: () => {\n        /** Transform Value */\n        let post_types = window.FAB_METABOX_LOCATION.post_types;\n        post_types = Object.keys(post_types).sort().map(function (k, i) {\n            return { id: k, text: post_types[k].label };\n        });\n        post_types = post_types.filter(function (k, i) {\n            return (window.FAB_METABOX_LOCATION.excludes_post_types.includes(k.id)) ? false : true;\n        });\n        let post_taxonomies = window.FAB_METABOX_LOCATION.post_taxonomies;\n        post_taxonomies = Object.keys(post_taxonomies).sort().map(function (k, i) {\n            return { id: k, text: post_taxonomies[k].labels.name };\n        });\n        /** Assign Values */\n        window.FAB_METABOX_LOCATION.defaultOptions.post_types = post_types;\n        window.FAB_METABOX_LOCATION.defaultOptions.type = [\n            ...window.FAB_METABOX_LOCATION.defaultOptions.type,\n            {\n                text: `Post`,\n                children: [\n                    { id: `post_type`, text: `Post Type` },\n                    ...post_types.map(function (k, i) {\n                        let text = k.text.substr(k.text.length - 1);\n                        text = (text === 's') ? k.text.substring(0, k.text.length - 1) : k.text;\n                        return { id: `single_${k.id}`, text: `Single ${text}` };\n                    })\n                ]\n            },\n            {\n                text: `Taxonomy`,\n                children: [\n                    ...post_taxonomies.map(function (k, i) {\n                        return { id: `taxonomy_${k.id}`, text: `${k.text} (${k.id})` };\n                    })\n                ]\n            },\n            {\n                text: 'User',\n                children: [\n                    { id: `user_session`, text: `Session` },\n                    { id: `user_role`, text: `Role` },\n                ]\n            }\n        ];\n    }, \n    /**\n     * Check invalid rules before form submission\n     * */\n    check_invalid_rules: () => {\n        let invalidRule = false;\n        jQuery('#fab-location-rules .fab-location-rule-item').each(function () {\n            let rule;\n            /** Rule Type */\n            rule = jQuery('.select2[name=\"fab_location_type[]', this);\n            if (!rule.val()) {\n                invalidRule = true;\n                return false;\n            }\n            /** Rule Operator */\n            rule = jQuery('.select2[name=\"fab_location_operator[]', this);\n            if (!rule.val()) {\n                invalidRule = true;\n                return false;\n            }\n            /** Rule Value */\n            rule = jQuery('.select2[name=\"fab_location_value[]', this);\n            if (!rule.val()) {\n                invalidRule = true;\n                return false;\n            }\n            /** Rule Logic */\n            rule = jQuery('.select2[name=\"fab_location_logic[]', this);\n            if (!rule.val()) {\n                invalidRule = true;\n                return false;\n            }\n        });\n        return invalidRule;\n    }, \n    /** Reload Select2 */\n    reloadSelect2: (DOM, option) => {\n        if (!option.selectedValue)\n            option.selectedValue = DOM.val();\n        if (DOM.data('select2')) {\n            DOM.select2('destroy');\n            DOM.html('');\n        }\n        DOM.select2(option);\n        DOM.val(option.selectedValue);\n        DOM.trigger('change');\n    }, \n    /**\n     * Get type comparator by type, for select2 option\n     * */\n    getComparatorOption: (typeValue, option) => {\n        /** if type is post_type */\n        if (typeValue !== undefined && typeValue) {\n            if (typeValue === 'post_type') { /** Post Type */\n                option.data = window.FAB_METABOX_LOCATION.defaultOptions.post_types;\n            }\n            else if (typeValue.includes('taxonomy_')) { /** Single Page */\n                option.ajax = window.FAB_METABOX_LOCATION.getComparatorOptionTaxonomyTermAjax(typeValue);\n            }\n            else if (typeValue === 'user_session') { /** User Session */\n                option.data = [{ id: 'user_session_logged_in', text: 'Logged In' }];\n            }\n            else if (typeValue === 'user_role') { /** User Session */\n                option.data = window.FAB_METABOX_LOCATION.defaultOptions.user.roles;\n            }\n            else if (typeValue.includes('single_')) { /** Single Page */\n                option.ajax = window.FAB_METABOX_LOCATION.getComparatorOptionSingleAjax(typeValue);\n            }\n        }\n        return option;\n    }, \n    /**\n     * Get comparator by type, for select2 option (Ajax)\n     * */\n    getComparatorOptionSingleAjax: (typeValue) => {\n        return {\n            delay: 500,\n            dataType: \"json\",\n            url: (params) => {\n                typeValue = typeValue.replace('single_', '');\n                let restBase = window.FAB_METABOX_LOCATION.post_types[typeValue].rest_base;\n                restBase = (restBase) ? restBase : typeValue;\n                restBase += (window.FAB_PLUGIN.isNumeric(params.term)) ? `/${params.term}` : '';\n                return `${window.FAB_METABOX_LOCATION.rest_url}wp/v2/${restBase}`;\n            },\n            data: (params) => {\n                let data = { _fields: 'id,title' };\n                /** Normal Search */\n                if (!window.FAB_PLUGIN.isNumeric(params.term)) {\n                    data = Object.assign(Object.assign({}, data), { filter: { post_status: 'publish,private' }, page: params.page || 1, search: params.term, orderby: 'title', order: 'asc' });\n                }\n                /** Save Params */\n                window.FAB_METABOX_LOCATION.ajax_params = data;\n                return data;\n            },\n            processResults: function (data) {\n                /** Handle Pagination */\n                let pagination = { more: false };\n                if (window.FAB_METABOX_LOCATION.ajax_params.page <\n                    this._request.getResponseHeader('X-WP-TotalPages'))\n                    pagination.more = true;\n                /** Grab Data */\n                if (!Array.isArray(data))\n                    data = [data];\n                data = data.map(function (v, i) {\n                    return { id: v.id, text: v.title.rendered.replace(/[^\\w\\s]/gi, '') };\n                });\n                return { results: data, pagination: pagination };\n            },\n        };\n    }, \n    /**\n     * Get comparator by type, for select2 option (Ajax)\n     * */\n    getComparatorOptionTaxonomyTermAjax: (typeValue) => {\n        return {\n            delay: 500,\n            dataType: \"json\",\n            url: (params) => {\n                typeValue = typeValue.replace('taxonomy_', '');\n                let restBase = window.FAB_METABOX_LOCATION.post_taxonomies[typeValue].rest_base;\n                restBase = (restBase) ? restBase : typeValue;\n                restBase += (window.FAB_PLUGIN.isNumeric(params.term)) ? `/${params.term}` : '';\n                return `${window.FAB_METABOX_LOCATION.rest_url}wp/v2/${restBase}`;\n            },\n            data: (params) => {\n                let data = {};\n                /** Normal Search */\n                if (!window.FAB_PLUGIN.isNumeric(params.term)) {\n                    data = {\n                        page: params.page || 1,\n                        per_page: 10,\n                        search: params.term\n                    };\n                }\n                /** Save Params */\n                window.FAB_METABOX_LOCATION.ajax_params = data;\n                return data;\n            },\n            processResults: function (data) {\n                /** Handle Pagination */\n                let pagination = { more: false };\n                if (window.FAB_METABOX_LOCATION.ajax_params.page <\n                    this._request.getResponseHeader('X-WP-TotalPages'))\n                    pagination.more = true;\n                /** Grab Data */\n                data = data.map(function (v, i) {\n                    return { id: v.id, text: v.name.replace(/[^\\w\\s]/gi, '') };\n                });\n                return { results: data, pagination: pagination };\n            },\n        };\n    } });\n"],"names":[],"sourceRoot":""}